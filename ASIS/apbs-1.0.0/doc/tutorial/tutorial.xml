<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS/DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd" [
<!ENTITY apbsversion "1.0.0">
<!ENTITY apbsdate "April-2008">
<!ENTITY apbsurl "http://apbs.sf.net">
<!ENTITY ugurl "../user-guide/index.html">
<!ENTITY pdb2pqrurl "http://pdb2pqr.sf.net/">
<!ENTITY vmdurl "http://www.ks.uiuc.edu/Research/vmd/">
<!ENTITY pymolurl "http://pymol.sf.net">
<!ENTITY pmvurl "http://www.scripps.edu/~sanner/python/">
<!ENTITY pKa "pK<subscript>a</subscript>">
<!ENTITY Ka "K<subscript>a</subscript>">
<!ENTITY epsp "&#949;<subscript>p</subscript>">
<!ENTITY epss "&#949;<subscript>s</subscript>">
<!ENTITY theta "&#952;">
]>

<book>
	<bookinfo>
		<title>APBS tutorial</title>
		<author>
			<firstname>Nathan</firstname>
			<surname>Baker</surname>
			<affiliation> 
				<orgname>Washington University in St.  Louis</orgname> 
				<orgdiv>Department of Biochemistry and
					Molecular Biophysics</orgdiv>
				<orgdiv>Center for Computational Biology</orgdiv>
			</affiliation>
			<address> 
				<street>700 S.  Euclid Ave.</street>
			       	<street>Campus Box 8036</street>
			       	<city>St.  Louis</city>
			       	<state>MO</state>
			       	<postcode>63110</postcode>
			       	<country>USA</country>
				<email>baker@ccb.wustl.edu</email> 
			</address> 
		</author>
		<copyright>
			<year>2002</year> <year>2003</year> <year>2004</year> 
			<year>2005</year> <year>2006</year> <year>2007</year> <year>2008</year>
			<holder>Washington University in St.  Louis</holder>
		</copyright>
		<legalnotice>
			<para>This file is part of APBS.</para>
			<para>
				<literallayout>Copyright (c) 2002-2008, Washington University in St. Louis.
Portions Copyright (c) 2002-2008.  Nathan A. Baker
Portions Copyright (c) 1999-2002.  The Regents of the University of California.
Portions Copyright (c) 1995.  Michael Holst.</literallayout></para>
			<para> All rights reserved. </para>
			<para> Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
				<itemizedlist>
					<listitem>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</listitem>
					<listitem>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</listitem>
					<listitem> Neither the name of Washington University in St. Louis nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.</listitem>
				</itemizedlist>
			</para>
			<para> THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</para>

		</legalnotice>
		<date>&apbsdate;</date>
		<edition>APBS version &apbsversion;</edition>
	</bookinfo>

	<toc></toc>

	<chapter id="introduction-sect"> <title>How to read this tutorial</title>

		<para>This tutorial is designed as a "how to" document to get
			users acquainted with computational electrostatics
			calculations using APBS.  In order to perform the
			provided examples, you will need the latest version of
			APBS (<ulink url="&apbsurl;">&apbsurl;</ulink>).  Other
			requirements are listed in the individual
			sections.</para>

		<important>
			<para>Note that many of the examples in this tutorial
				can also be run through the web-based <ulink
					url="http://gemstone.mozdev.org/">Gemstone</ulink>
				service without the need for local
				installations of the APBS software.  More
				information is available in <xref
					linkend="gemstone-sect"/>.
			</para>
		</important>

		<warning>
			<para> This document is still under construction and should be completed before the next APBS release.  Many of the topics covered in the incomplete sections are demonstrated in the APBS <filename>examples</filename> directory.
			</para>
		</warning>

	</chapter>

	<chapter id="pdb2pqr-sect"> <title>How do I get my structure ready for
			electrostatics calculations?</title>

		<para>
			In order to perform electrostatics calculations on your
			biomolecular structure of interest, you need to provide
			atomic charge and radius information to APBS.  Charges
			are used to form the biomolecular charge distribution
			for the Poisson-Boltzmann (PB) equation while the radii
			are used to construct the dielectric and ionic
			accessibility functions.  This charge and radius
			information can be provided to APBS in a few different
			formats which are described in more detail below.
		</para>

		<sect1 id="pqr-format-sect"> <title>PQR format</title>
			<para>
				The <ulink url="&ugurl;#pqr-format">PQR
					format</ulink> provides a very simple
				way to include parameter information by 
				by replacing the occupancy and temperature
				columns of a PDB-format structure file with 
				charge ("Q") and radius ("R") information.
				Unfortunately, the simplicity of this format
				also limits its extensibility:  it can be very
				difficult to add new atom types and parameters
				in a generic format without the use of external
				software such as <ulink
					url="&pdb2pqrurl;">PDB2PQR</ulink>.
				The XML parameter format described <link
					linkend="xml-format-sect">below</link>
				is much easier to modify.
			</para>
		</sect1>

		<sect1 id="xml-format-sect"> <title>XML format</title>
			
			<para>The <ulink url="&ugurl;#pqr-xml-format">XML format</ulink> provides a somewhat more complicated format for including parameter information with increased flexibility in formatting, extension, and other modifications.  As in the PQR format, atom coordinates are supplemented with charge and radius information.  Please see <ulink url="&ugurl;#pqr-xml-format">the APBS user guide</ulink> for complete format specifications.</para>
			
		</sect1>

		<sect1 id="pdb2pqr-subsect"> <title>Generating PQR files from PDB
				files (PDB2PQR)</title>

			<note>
				<para>This tutorial was prepared using PDB2PQR 1.2.1</para>
			</note>

			<para>
				The <ulink url="&pdb2pqrurl;">PDB2PQR</ulink> web service and software will convert
				most PDB files into PQR format with some caveats, in particular the inability to "repair" large regions of missing coordinates.
				Although PDB2PQR can fix some missing heavy atoms in sidechains, it does not currently have the (nontrivial) capability to model in large regions of missing backbone and sidechain coordinates.
			</para>
			<para>
				<ulink url="&pdb2pqrurl;">PDB2PQR</ulink> will also perform hydrogen bond optimization,  sidechain rotamer search, limited titration state assignment, ligand parameterization, and APBS input file preparation.
				Please see <ulink url="&pdb2pqrurl;">&pdb2pqrurl;</ulink> for more details.
			</para>

			<para>
				As mentioned above, PDB2PQR is discussed in
				more detailed on the 
				<ulink url="&pdb2pqrurl;">PDB2PQR
					homepage</ulink> .  Therefore, we will
				review the minimal steps required to produce a
				PQR file from a PDB file here.  To begin,
				choose a server from <ulink
					url="&pdb2pqrurl;#availability">&pdb2pqrurl;#availability</ulink>.
			</para>

			<sect2> <title>Choose the PDB file to convert</title>
				<para>
					Either enter the 4-character <ulink
						url="http://www.pdb.org/">PDB</ulink>
					ID or accession number (e.g., <ulink
						url="http://www.pdb.org/pdb/explore.do?structureId=1FAS">1FAS</ulink>,
					<ulink
						url="http://www.pdb.org/pdb/explore.do?structureId=1MAH">1MAH</ulink>,
					<ulink
						url="http://www.pdb.org/pdb/explore.do?structureId=1LYS">1LYS</ulink>,
					etc.) or upload your own PDB file.
					<note>
						<para> Note that, if you choose
							to enter a 4-character
							PDB file, PDB2PQR will
							process 
							<emphasis>all
								recognizable 
								chains</emphasis> 
							of PDB file
							<emphasis>as it was
								deposited</emphasis>
							in the PDB (e.g., not 
							the biological unit,
							any related
							transformations, etc.).
						</para>
					</note>
				</para>
			</sect2>

			<sect2 id="pdb2pqr-ff-sect"> <title>Pick a forcefield</title>
				<para>
					<emphasis>For most applications, the choice is
						easy:  PARSE.</emphasis>  This
					forcefield has been optimized for
					implicit solvent calculation and is
					probably the best choice for
					visualization of protein electrostatics
					and many common types of energetic
					calculations for proteins.  However,
					AMBER and CHARMM may be more
					appropriate if you are attempting to
					compare directly to simulations
					performed with those force fields,
					require nucleic acid support, are
					simulating ligands parameterized with
					those force fields, etc.
				</para>
				<para>
					It is also possible to upload a
					user-defined forcefield (e.g., to
					define radii and charges for ligands or
					unusual residues).  Please see the
					<ulink
						url="&pdb2pqrurl;">PDB2PQR</ulink>
					documentation for more information.
				</para>
			</sect2>

			<sect2> <title>Output naming scheme</title>

				<para>This is largely irrelevant to
					electrostatics calculations but may be
					important for visualization.  When in
					doubt, choose the "Internal naming
					scheme" which attempts to conform to
					IUPAC standards.</para>
			</sect2>

			<sect2> <title>Other options</title>

				<para>These options fall into two categories:
					how to build missing atoms (including
					hydrogens) onto the structure and
					additional output configuration. 
					Please see <ulink url="&pdb2pqrurl;">&pdb2pqrurl;</ulink> for more details.
				</para>
			</sect2>

		</sect1> 

	</chapter>

	<chapter id="viz-sect"> <title>How do I visualize the electrostatic
potential around my biomolecule?</title>

		<para> There are a number of excellent molecular graphics
			programs which can be used to visualize electrostatic
			properties in the context of the biomolecule.  Since
			there are far too many to review in any depth, we will
			focus on the 3 packages with which we are most
			familiar. </para>

		<sect1 id="vmd-sect"> <title>VMD</title>

			<para>
				The <ulink url="&vmdurl;">VMD</ulink> molecular
				graphics software package provides support for
				both the execution of APBS and the
				visualization of the resulting electrostatic
				potentials.  Documentation on the APBS
				interface has been provided by the VMD
				developers at <ulink
					url="http://www.ks.uiuc.edu/Research/vmd/plugins/apbsrun/">http://www.ks.uiuc.edu/Research/vmd/plugins/apbsrun/</ulink>.
				We will supplement this with a basic
				demonstration of how go from a PDB entry to a
				plot of structure &amp; potential in VMD using
				APBS.
			</para>

			<note>
				<para>This tutorial was written using VMD
					1.8.5.</para>
			</note>

			<sect2> <title>Generating the PQR</title>

				<para> 
					We'll perform this example with arc
					repressor
					(PDB ID <ulink
						url="http://www.pdb.org/pdb/explore.do?structureId=1MYK">1MYK</ulink>),
					a DNA binding protein.  The first step
					in the visualization process is
					generating a PQR file for use with VMD
					and APBS.  Please follow the directions
					in <xref linkend="pdb2pqr-subsect"/> to
					generate a PQR file for this structure.
				</para>
			</sect2>

			<sect2> <title>Loading the PQR</title>

				<para>
					Load the PQR file you just created into
					VMD (<menuchoice>
						<guimenu>File</guimenu> 
						<guimenuitem>New molecule...</guimenuitem>
					</menuchoice> in the VMD Main window).
					Adjust the molecule to the desired
					view.
					Depending on the force
					field<footnote><para>Visualization
							seems to work best with
							PARSE</para></footnote>
					you used in PDB2PQR, you may notice
					that VMD is displaying some strange
					bonds.  When a PQR file is loaded into
					VMD, bond distances are inferred from
					the PQR radii.  These radii were chosen
					for continuum electrostatics
					calculations, not visualization.  Don't
					worry if some of the bonds appear a bit
					strange (hide the hydrogens if it
					really bothers you).
				</para>

			</sect2>

			<sect2> <title>Running the electrostatics calculation</title>

				<para>
					You're now ready for electrostatics
					calculations.  
					<orderedlist>
						<listitem>
							<para>Choose
								<menuchoice>
									<guimenu>Extensions</guimenu>
									<guisubmenu>Analysis</guisubmenu>
									<guimenuitem>APBS
										electrostatics</guimenuitem>
								</menuchoice>
								in the VMD Main
								window.  A new
								APBS Tool
								window should
								appear.
							</para>
						</listitem>
						<listitem>
							<para>Choose 
								<menuchoice>
									<guimenu>Edit</guimenu> 
									<guimenuitem>Settings...</guimenuitem> 
								</menuchoice> 
								in the APBS
								Tool window and
								set the path to
								your local copy
								of the APBS
								executable.
								Hit
								<guibutton>OK</guibutton>
								to close this
								window.
							</para>
						</listitem>
						<listitem>
							<para>Select the "0"
								calculation
								from the
								"<guilabel>Individual
									PB
									calculations
									(ELEC):</guilabel>"
								window.  Hit 
								the
								<guibutton>Edit</guibutton>
								button.  Adjust
								the APBS
								settings here
								as you desire.
								The defaults
								are usually
								fine, although
								it may be
								useful to edit
								the ions to
								adjust the
								ionic strength
								used in the
								calculation.
								Hit
								<guibutton>OK</guibutton>
								when you're
								done.
							</para>
						</listitem>
						<listitem>
							<para>You're now ready
								to run the
								calculation.
								Hit
								<guibutton>Run
									APBS</guibutton>
								in the APBS
								Tool window.
								Check the VMD
								Console window
								for information
								about the job
								while it's
								running.  When
								the job is
								finished, a
								"APBSRun: Load
								APBS Maps"
								window should
								appear.  Select
								"<guibutton>Load
									files
									into
									top
									molecule</guibutton>"
								and hit
								<guibutton>OK</guibutton>.
							</para>
						</listitem>
					</orderedlist>
				</para>

			</sect2>

			<sect2> <title>Electrostatics visualization</title>

				<sect3 id="vmd-isocontour">  <title>Isocontour visualization</title>
					<para>
						One of the most popular
						visualization methods is the
						isocontour.
					</para>
					<orderedlist>
						<listitem>
							<para>First, choose <menuchoice> 
									<guimenu>Graphics</guimenu> 
									<guimenuitem>Representations...</guimenuitem>
								</menuchoice>
								from the VMD
								Main window.
							</para>
						</listitem>
						<listitem>
							<para>
								Hit the
								<guibutton>Create
									Rep</guibutton>
								button and
								change
								<guilabel>Drawing
									Method</guilabel>
								to
								"Isosurface".
							</para>
						</listitem>
						<listitem>
							<para>
								Change
								<guilabel>Draw</guilabel>
								from "Points"
								to "Solid
								Surface" and
								<guilabel>Material</guilabel>
								to
								"Transparent". 
							</para>
						</listitem>
						<listitem>
							<para>
								Note that the
								current
								isovalue is 0;
								change this to
								1 (or 5 or 10
								or whatever)
								depending on
								your personal
								preferences.
							</para>
						</listitem>
						<listitem>
							<para>
								To continue the
								lonstanding
								tradition of
								electrostatic
								potential
								coloring,
								choose "ColorID
								0" for the
								<guilabel>Coloring
									Method</guilabel>.
							</para>
						</listitem>
						<listitem>
							<para>
								For the
								negative
								isocontour, hit
								"<guibutton>Create
									Rep</guibutton>"
								and select the
								newly created
								representation.
								Change the
								isocontour
								value to -1 (or
								5 or 10...) and
								the ColorID to
								1.
							</para>
						</listitem>
					</orderedlist>
					<para>
						At this point, you probably
						have an image that looks
						something like this (note that
						I changed the surface to points
						to make the figure a bit
						cleaner):
						<figure> <title>Arc repressor isocontours in VMD</title>
							<graphic
								fileref="images/arc-iso-vmd.png"></graphic>
						</figure>
					</para>
				</sect3>

				<sect3> <title>Visualizing surface potentials</title>
					<para>
						Another popular method of
						electrostatic potential
						visualization maps the
						electrostatic potential to the
						biomolecular surface.  Before
						proceeding, you may want to
						delete the two isocontours you
						just created using the
						<guibutton>Delete
							Rep</guibutton> in the
						Graphical Representations
						window.
					</para>
					<orderedlist>
						<listitem>
							<para>
								Go to the
								Graphical
								Representations
								window
								(<menuchoice>
									<guimenu>Graphics</guimenu>
									<guimenuitem>Representations...</guimenuitem>
								</menuchoice>
								from the VMD
								Main window)
								and create a
								new
								representation
								of the molecule
								with the 
								<guibutton>Create
									Rep</guibutton>
								button.
							</para>
						</listitem>
						<listitem>
							<para> Go to the "Draw
								style" tab of
								the Graphical
								Representations
								window and
								change
								<guilabel>Drawing
									Method</guilabel>
								to
								"Surf"<footnote>
									<para>FYI,
										this
										appears
										to
										generate
										a
										molecular
										or
										Connolly
										type
										of
										surface
										rather
										than
										the
										solvent-accessible
										or
										Lee-Richards
										surface
										I
										personally
										prefer
										for
										this
										type
										of
										visualization...</para>
								</footnote>
								and
								<guilabel>Coloring
									Method</guilabel>
								to "Volume".
							</para>
						</listitem>
						<listitem>
							<para>
								Go to the
								"Trajectory
								tab" of the
								Graphical
								Representations
								window
								and change the
								"<guilabel>Color
									Scale
									Data
									Range:</guilabel>"
								to -10 to 10
								(or whatever
								your favorite
								values are).
							</para>
						</listitem>
						<listitem>
							<para>
								Based on your
								version of VMD
								and your
								personal
								preferences,
								you might want
								to change the
								color scale for
								this image.  Go
								to <menuchoice>
									<guimenu>Graphics</guimenu>
									<guimenuitem>Colors...</guimenuitem>
								</menuchoice>
								in the VMD Main
								window and
								select the
								"Color Scale"
								tab from the
								new "Color
								Controls"
								window.  The
								traditional
								coloring scheme
								for
								electrostatics
								is "RWB" (in
								the
								<guilabel>Method</guilabel>
								menu).
							</para>
						</listitem>
					</orderedlist>
					<para>
						Your molecule now probably
						looks like this:
						<figure> <title>Arc repressor surface potential in VMD</title>
							<graphic fileref="images/arc-surf-vmd.png"></graphic>
						</figure>
					</para>
				</sect3>

			</sect2>

		</sect1>

		<sect1 id="pymol-sect"> <title>PyMOL</title>
			<para>
				The <ulink url="&pymolurl;">PyMOL</ulink> molecular
				graphics software package provides support for
				both the execution of APBS and the
				visualization of the resulting electrostatic
				potentials.  We will provide a basic
				demonstration of how go from a PDB entry to a
				plot of structure &amp; potential in PyMOL using
				APBS.
			</para>

			<note>
				<para>This tutorial was written using
					PyMOLX11Hybrid 0.99 on a Mac.</para>
			</note>

			<sect2> <title>Generating the PQR</title>
				<para>We'll perform this example with
					fasciculin-2 (PDB ID <ulink
						url="http://www.pdb.org/pdb/explore.do?structureId=1FAS">1FAS</ulink>),
					a snake neurotoxin which binds the
					negatively-charged
					acetylcholinesterase.  Please generate
					the PQR file using the steps outlined
					in <xref linkend="pdb2pqr-subsect"/>.
				</para>

				<para>Load the PQR file you created into PyMOL
					(<menuchoice> <guimenu>File</guimenu>
						<guimenuitem>Open...</guimenuitem>
					</menuchoice>) and choose your favorite
					graphical representation.</para>

			</sect2>

			<sect2> <title>Performing the electrostatics calcuation
					</title>

				<para>
					Go to the 
					<menuchoice>
						<guimenu>Plugin</guimenu>
						<guimenuitem>APBS
							Tools...</guimenuitem>
					</menuchoice>
					to open the APBS calculation plugin.
					<orderedlist>
						<listitem>
							<para>
								Under the
								"<guilabel>Main</guilabel>"
								tab of the
								PyMOL APBS
								Tools window,
								select
								<guibutton>Use
									another
									PQR</guibutton>
								and either
								browse to (via
								the
								<guibutton>Choose
									Externally
									Generated
									PQR:</guibutton>
								button) or input the
								path to your
								PQR file.  This
								step is
								necessary to
								ensure you use
								the radii and
								charges
								assigned by
								PDB2PQR.
							</para>
						</listitem>
						<listitem>
							<para>
								Under the
								"<guilabel>APBS
									Location</guilabel>"
								tab of the
								PyMOL APBS
								Tools window,
								either browse
								to (via the
								<guibutton>APBS
									binary
									location:
									:</guibutton>
								button) or input the
								path to your
								local APBS
								binary.  It is
								not necessary
								to provide a
								path to the
								APBS psize.py
								binary for most
								biomolecules.
							</para>
						</listitem>
						<listitem>
							<para>
								Under the
								"<guilabel>Temporary
									File
									Locations</guilabel>"
								tab of the
								PyMOL APBS
								Tools window,
								customize the
								locations of
								the various
								temporary files
								created during
								the run.  This
								can be useful
								if you want to
								save the
								generated files
								for later use.
							</para>
						</listitem>
						<listitem>
							<para>
								Under the
								"<guilabel>Configuration</guilabel>"
								tab of the
								PyMOL APBS
								Tools window,
								hit the
								<guibutton>Set
									grid</guibutton>
								to set the grid
								spacings.
								The default
								values are
								usually
								sufficient for
								all but the
								most highly
								charged
								biomolecules.
							</para>
						</listitem>
						<listitem>
							<para>
								Under the
								"<guilabel>Configuration</guilabel>"
								tab of the
								PyMOL APBS
								Tools window,
								customize the
								remaining
								parameters; the
								defaults are
								usually
								OK<footnote><para>Although
										I
										usually
										prefer
										0.150
										concentrations
										for
										the
										+1
										and
										-1
										ion
										species
										so
										electrostatic
										properties
										aren't
										overly
										exaggerated.</para></footnote>.
							</para>
						</listitem>
						<listitem>
							<para>
								Under the
								"<guilabel>Configuration</guilabel>"
								tab of the
								PyMOL APBS
								Tools window,
								hit the
								<guibutton>Run
									APBS</guibutton>
								button to start
								the APBS
								calculation.
								Depending on
								the speed of
								your computer,
								this could take
								a few minutes.
								The
								<guibutton>Run
									APBS</guibutton>
								button will
								become
								unselected when
								the calculation
								is finished.
							</para>
						</listitem>
					</orderedlist>
				</para>

			</sect2>

			<sect2> <title>Visualize the electrostatic potential</title>

				<para> Before proceeding with the remaining
					steps, you must load the electrostatic
					potential data into PyMOL.  Under the
					"<guilabel>Visualization</guilabel>"
					tab of the PyMOL APBS Tools window, hit
					the <guibutton>Update</guibutton>
					button.  </para>

				<sect3> <title>Electrostatic isocontours</title>

					<para>PyMOL makes this step very easy:
						adjust the positive and
						negative
						"<guilabel>Contour</guilabel>"
						fields to the desired values
						(usually +/-1, +/-5, or +/-10
						kT/e<footnote><para>Note that
								PyMOL has a
								slight units
								error on the
								contour
								values.</para></footnote>)
						and hit the 
						<guilabel>Positive Isosurface</guilabel>
						and <guilabel>Negative Isosurface</guilabel>
						and <guibutton>Show</guibutton>
						buttons.
					</para>

					<para>
						At this point, you probably
						have a figure that looks
						something like:
						<figure> <title>+/- 1 kT/e
							electrostatic potential
							isocontours of FAS2 in PyMOL</title>
							<graphic
								fileref="images/fas2-iso-pymol.png"></graphic>
						</figure>
					</para>
				</sect3>

				<sect3> <title>Surface potentials</title>

					<para>If you haven't already, hide the
						isocontours by hitting
						<guilabel>Positive Isosurface</guilabel>
						and <guilabel>Negative Isosurface</guilabel>
						and <guibutton>Hide</guibutton>
						buttons.
					</para>

					<para>The surface potential is also
						straightforward to visualize.
						Set the 
						"<guilabel>Low</guilabel>"
						and
						"<guilabel>High</guilabel>"
						values to the desired values 
						(usually +/-1, +/-5, or +/-10
						kT/e) at which the surface
						colors are clamped at red (-)
						or blue (+).  Check the
						"<guibutton>Solvent accessible
							surface</guibutton>"
						and "<guibutton>Color by
							potential on sol. acc.
							surf.</guibutton>"
						buttons to plot the potential
						on the solvent-accessible
						(probe-inflated or
						Lee-Richards)
						surface<footnote>
							<para>In my opinion,
								the
								solvent-accessible
								surface tends
								to reveal more
								global features
								of the surface
								potential.
								Tighter
								surfaces (e.g.,
								van der Waals
								and molecular
								or Connolly
								surfaces) tend
								to simply map
								atomic surface charges
								onto the
								biomolecular
								surface.</para>
						</footnote>.
						Hit the "<guilabel>Molecular
							Surface</guilabel>"
						<guibutton>Show</guibutton>
						button to load the surface
						potential.
						<figure> <title>+/- 5 kT/e
							electrostatic surface potential
							of FAS2 in PyMOL</title>
							<graphic
								fileref="images/fas2-surf-pymol.png"></graphic>
						</figure>
					</para>

				</sect3>

			</sect2>

		</sect1>

		<sect1 id="pmv-sect"> <title>PMV</title>

			<!--
			<para>
				The <ulink url="&pmvurl;">PMV</ulink> molecular
				graphics software package provides support for
				both the execution of APBS and the
				visualization of the resulting electrostatic
				potentials.  Documentation on the APBS
				interface has been provided by the PMV
				developers at <ulink
					url="http://msltools.scripps.edu/documentation/tutorial/molecular-electrostatics">http://msltools.scripps.edu/documentation/tutorial/molecular-electrostatics</ulink>
				We will supplement this with a basic
				demonstration of how go from a PDB entry to a
				plot of structure &amp; potential in PMV using
				APBS.
			</para>

			<note>
				<para>This tutorial was written using PMV
					1.4.3.</para>
			</note>

			<sect2> <title>Generating the PQR</title>

				<para> 
					We'll perform this example with
					calmodulin
					(PDB ID <ulink
						url="http://www.pdb.org/pdb/explore.do?structureId=1CFD">1CFD</ulink>),
					a <ulink
						url="http://www.pdb.org/pdb/static.do?p=education_discussion/molecule_of_the_month/pdb44_1.html">calcium
						binding protein</ulink>.  The first step
					in the visualization process is
					generating a PQR file for use with PMV
					and APBS.  Please follow the directions
					in <xref linkend="pdb2pqr-subsect"/> to
					generate a PQR file for this structure.
				</para>

				<note>PMV has built-in PDB2PQR support; you can
					also generate PQRs on-the-fly from
					within PMV via the 
					<menuchoice>
						<guimenu>Compute</guimenu>
						<guisubmenu>Electrostatics</guisubmenu>
					</menuchoice> sub-menu. </note>

				<para> Load the PQR you created into PMV
					(<menuchoice> <guimenu>File</guimenu>
						<guimenuitem>Read Molecule</guimenuitem>
					</menuchoice>) and choose your favorite
					representation (<menuchoice>
						<guimenu>Display</guimenu>
				</menuchoice>). </para>
			</sect2>

			<sect2> <title>Performing the electrostatics calculation</title>

				<para>Go to the 
					<menuchoice> <guimenu>Compute</guimenu>
						<guisubmenu>Electrostatics</guisubmenu>
						<guimenuitem>Compute Potential
							Using
							APBS</guimenuitem>
					</menuchoice> menu.  APBS is bundled
					with PMV; this calculation should work
					without any addition
					configuration.</para>

				<para>Additional settings for custom
					electrostatics calculations are
					available under the 
					<menuchoice> <guimenu>Compute</guimenu>
						<guisubmenu>Electrostatics</guisubmenu>
					</menuchoice> sub-menu.  In particular,
					<menuchoice> <guimenu>Compute</guimenu>
						<guisubmenu>Electrostatics</guisubmenu>
						<guimenuitem>Preferences</guimenuitem>
					</menuchoice> 
					allows users to configure settings for
					custom APBS and PDB2PQR paths and
					behaviors (force fields, etc.).
					Additionally,
					<menuchoice> <guimenu>Compute</guimenu>
						<guisubmenu>Electrostatics</guisubmenu>
						<guimenuitem>Setup</guimenuitem>
					</menuchoice> 
					allows users to customize the
					invocation of APBS by setting ion
					concentrations, grid spacings, etc.
					Many of these options are
					self-explanatory and/or described in
					more detail in the <ulink
						url="user-guide/index.html">APBS
						User Manual</ulink>.  For most
					visualization applications, the default
					settings should be appropriate.</para>

			</sect2>

			<sect2> <title>Visualizing the electrostatic potential</title>

				<sect3> <title>Surface potentials</title>
					<para>The surface potential can be
						displayed from the 
						<menuchoice> 
							<guimenu>Compute</guimenu>
							<guisubmenu>Electrostatics</guisubmenu>
							<guimenuitem>Map Potential to Surface </guimenuitem>
						</menuchoice>
						menu item.  PMV uses a very
						interesting method for plotting
						the potential.  In particular,
						it maps the potential at some
						distance away from the surface
						to the molecular surface.  This
						has the advantages of the
						"global" electrostatic
						properties from the solvent
						accessible surface potential
						maps while preserving the shape
						information provided by the
						molecular surface.  The
						distance from the surface can
						be controlled by the
						<guilabel>"Distance from
							surface"</guilabel>
						dial in the PMV <guilabel>Map
							Potential to
							Surface</guilabel>
						window.</para>
				</sect3>

			</sect2>
			-->


			<warning><para>Under construction -- surfaces are
					currently broken with some PQR
					structure/force field
					combinations.</para></warning>

		</sect1>

	</chapter>

	<chapter id="solvation-sect"> <title>How do I calculate a solvation energy?</title>

		<para>
			Solvation energies are usually decomposed into a free
			energy cycle as shown in <xref
				linkend="solvation-cycle-full"/>.  Note that
			such solvation energies often performed on fixed
			conformations; as such, they are more correctly called
			"potentials of mean force".  More details on using APBS
			for the polar and nonpolar portions of such a cycle are
			given in the following sections.
			<figure id="solvation-cycle-full"> <titleabbrev>Full
					solvation energy cycle</titleabbrev>
				<title>Full solvation energy cycle.  This cycle incorporates several processes into the solvation energy (step 1).  Step 2  indicates charging of the solute in solution (e.g., inhomogeneous dielectric,  ions present).  Step 3 indicates the introduction of attractive solute-solvent dispersive interaction interactions (e.g., an integral of Weeks-Chandler-Andersen interactions over the solvent-accessible volume).  Step 4 indicates the introduction of repulsive solute-solvent interaction (e.g., cavity formation).  Steps 5 and 6 are basically null steps although they could be used to offset unwanted energies added in Steps 3 and 4 above.  Finally, Step 6 represents the charging of the solute in a vacuum or homogeneous dielectric environment in the absence of mobile ions.</title>
				<graphic
					fileref="images/solvation-cycle-full.png"></graphic>
			</figure>
		</para>

		<sect1> <title>Polar solvation</title>
			<para> The full free energy cycle in <xref
					linkend="solvation-cycle-full"/> is
				usually decomposed into polar and nonpolar
				parts.  The polar portion is usually
				represented by the charging energies in Steps 2
				and 6:
				<informalequation>
					<graphic
						fileref="images/polar-solvation-equation.png"/>
				</informalequation>
				Energies returned from APBS electrostatics
				calculations are charging free energies.
				Therefore, to calculate the polar contribution
				to the solvation free energy, we simply need to
				setup two calculations corresponding to Steps 2
				and 6 in <xref
					linkend="solvation-cycle-full"/>.
				However, the electrostatic charging free
				energies returned by APBS include
				self-interaction terms.  These are the energies
				of a charge distribution interacting with
				itself.  Such self-interaction energies are
				typically very large and extremely sensitive to
				the problem discretization (grid spacing,
				location, etc.).  Therefore, it is very
				important that the two calculations are
				performed with identical grid spacings,
				lengths, and centers, in order to ensure
				appropriate matching (or "cancellation") of
				self-energy terms.
			</para>
			<para> One of the canonical examples for polar
				solvation is the Born ion:  a nonpolarizable
				sphere with a single charge at its center
				surrounded by an aqueous medium.  In the
				absence of external ions, the polar solvation
				energy for this sytem is given by <xref
					linkend="born-solvation-energy-equation"/>.
				<equation id="born-solvation-energy-equation">
					<title>Born ion polar solvation energy.
					q is the ion charge, a is the ion
radius, and the two epsilons denote the internal and external (solution)
dielectric constants.  This model assumes zero ionic strength.</title>
					<titleabbrev>Born ion polar solvation energy</titleabbrev>
					<graphic fileref="images/born-solvation-energy-equation.png"/>
				</equation>
				We can setup a PQR file for the Born ion for
				use with APBS as shown in <xref
					linkend="born-pqr"/> and downloaded
				<ulink url="examples/born/born.pqr">here</ulink>.
				<example id="born-pqr"> <title>Born ion PQR</title>
					<programlisting>
REMARK  This is an ion with a 3 A radius and a +1 e charge
ATOM      1   I  ION     1 0.000   0.000   0.000  1.00 3.00
					</programlisting>
				</example>
				We're interested in performing two APBS
				calculations for the charging free energies in
				homogeneous and heterogeneous dielectric
				coefficients.  We'll assume the internal
				dielectric coefficient is 1 (e.g., a vacuum)
				and the external dielectric coefficient is
				78.54 (e.g., water).
				for these settings, the polar solvation energy
				expression has the form
				<informalequation>
					<graphic fileref="images/born-solvation-energy-equation2.png"/>
				</informalequation>
				where R is the ion radius
				in Angstroms.  One possible APBS input file for
				this calculation is shown in <xref
					linkend="born-input"/> and can be
				downloaded <ulink
					url="examples/born/born.in">here</ulink>.
				<example id="born-input">
					<title>Example born input file</title>
					<programlisting>
# READ IN MOLECULES
read
  mol pqr born.pqr
end


elec name solv # Electrostatics calculation on the solvated state
	mg-manual # Specify the mode for APBS to run
	dime 97 97 97 # The grid dimensions
	nlev 4 # Multigrid level parameter
	grid 0.33 0.33 0.33 # Grid spacing
	gcent mol 1 # Center the grid on molecule 1
	mol 1 # Perform the calculation on molecule 1
	lpbe # Solve the linearized Poisson-Boltzmann equation
	bcfl mdh # Use all multipole moments when calculating the potential
	pdie 1.0 # Solute dielectric
	sdie 78.54 # Solvent dielectric
	chgm spl2 # Spline-based discretization of the delta functions
	srfm mol # Molecular surface definition
	srad 1.4 # Solvent probe radius (for molecular surface)
	swin 0.3 # Solvent surface spline window (not used here)
	sdens 10.0 # Sphere density for accessibility object
	temp 298.15 # Temperature
	calcenergy total # Calculate energies
	calcforce no # Do not calculate forces
end

elec name ref # Calculate potential for reference (vacuum) state
	mg-manual
	dime 97 97 97
	nlev 4
	grid 0.33 0.33 0.33
	gcent mol 1
	mol 1
	lpbe
	bcfl mdh
	pdie 1.0
	sdie 1.0
	chgm spl2
	srfm mol
	srad 1.4
	swin 0.3
	sdens 10.0
	temp 298.15
	calcenergy total
	calcforce no
end

# Calculate solvation energy
print energy solv - ref end

quit
					</programlisting>
				</example>
				Running this example with a recent version of
				APBS should give an answer of -229.59 kJ/mol
				which is in good agreement with the -230.62
				kJ/mol predicted by the analytic formula above.
			</para>
			<para> 
				Note that the Born example above can be easily
				generalized to other polar solvation energy
				calculations.  For example, ions could be added
				to the <literal>solv</literal>
				<varname>ELEC</varname> section, dielectric
				constants could be modified, surface
				definitions could be changed (in both
				<varname>ELEC</varname> sections!), or more
				complicated molecules could be examined.  Many
				of the examples included with APBS (e.g.,
				<filename>solv</filename> and
				<filename>ionize</filename>) also demonstrate
				solvation energy calculations.  
			</para>
			<note>
				<para>Note that, as molecules get larger, it is
					important to examine the sensitivity of
					the calculated solvation energies with
					respect to grid spacings and
					dimensions.</para>
			</note>
		</sect1>

		<sect1> <title>Apolar solvation</title>
		
			<para>Referring back to the full free energy cycle in <xref linkend="solvation-cycle-full"/>, the nonpolar solvation free energy is usually represented by the energy changes in Steps 3 through 5:
				<informalequation>
					<graphic fileref="images/nonpolar-solvation-equation.png"/>
				</informalequation>
				where Step 4 represents the energy of creating a cavity in solution and Steps 3-5 is the energy associated with dispersive interactions between the solute and solvent.
				There are many possible choices for modeling this nonpolar solvation process.  APBS implements a relatively general model described by <ulink url="http://dx.doi.org/10.1073/pnas.0600118103">Wagoner and Baker (PNAS 2006)</ulink> and references therein.  
				The implementation and invocation of this model is described in more detail in <ulink url="&ugurl;#apolar">the APBS user guide</ulink>.
			</para>
			<para>
				Our basic model for the cavity creation term (Step 4) is motivated by scaled particle theory and has the form
				<informalequation>
					<graphic fileref="images/nonpolar-solvation-cavity-equation.png"/>
				</informalequation>
				where p is the solvent pressure (<literal>press</literal> keyword in APBS), &Delta; V is the solvent-accessible volume of the solute, &gamma; is the solvent surface tension (<literal>gamma</literal> keyword in APBS), and &Delta; A is the solvent-accessible surface area of the solute.
			</para>
			<para>
				Our basic model for the dispersion terms (Steps 3 and 5) follow a Weeks-Chandler-Anderson framework as proposed by Levy, Zhang, and Gallicchio (<ulink url="http://dx.doi.org/10.1002/jcc.10045">J Comput Chem, 2002</ulink>):
				<informalequation>
					<graphic fileref="images/nonpolar-solvation-dispersion-equation.png"/>
				</informalequation>
				where &rho; is the bulk solvent density (<literal>bconc</literal> keyword in APBS), &Omega; is the problem domain, u<superscript>(att)</superscript>(y) is the attractive dispersion interaction between the solute and the solvent at point y with dispersive Lennard-Jones parameters specified in APBS parameter files, and &theta;(y) describes the solvent accessibility of point y.
			</para>
			
			<note>
				<para>
					The ability to independently adjust <literal>press</literal>, <literal>gamma</literal>, and <literal>bconc</literal> means that the general nonpolar solvation model presented above can be easily adapted to other popular nonpolar solvation models.
					For example, setting <literal>press</literal> and <literal>bconc</literal> to zero yields a typical solvent-accessible surface area model.
				</para>
			</note>
			
			<para>
				Unlike the Born ion, there are no good simple examples for demonstrating these types of nonpolar calculations.  APBS includes several examples of calculations using the apolar model above.  Interested readers should examine the <filename>alkanes</filename> apolar example provided with APBS.
			</para>
		</sect1>

	</chapter>

	<chapter id="binding-sect">
		<title>How do I calculate a binding energy?</title>

		<para> In general, implicit solvent models are used to
			calculation the contribution of
			<emphasis>solvation</emphasis> to binding free
			energies.  Additional binding free energy contributions
			(molecular mechanics energies, entropic changes, etc.)
			must be calculated separately and are not discussed in
			this tutorial.  One exception is the inclusion of
			intermolecular Coulombic interations; we'll discuss how
			these can be calculated in APBS <link
				linkend="binding-coulomb">below</link>. </para>

		<para> Our framework for calculating solvation contributions to
			binding free energies is shown in <xref
				linkend="binding-cycle"/>.
			<figure id="binding-cycle">
				<title> Binding free energy cycle illustrating
				binding in terms of transfer free energies from
				a homogeneous dielectric environment (where
				interactions are described by Coulomb's law) to 
				an inhomogeneous dielectric environment with
				differing internal (green) and external (cyan)
				dielectric constants.  The binding
				(dissociation) free energy is depicted in Step
				3.</title>
				<titleabbrev> Binding free energy cycle
				</titleabbrev>
				<graphic fileref="images/binding-cycle.png"/>
			</figure>
			The binding free energy is given by <xref
				linkend="binding-cycle-eqn"/>.
			<equation id="binding-cycle-eqn"> 
				<title> Binding free energy formula based on
					<xref linkend="binding-cycle"/>. </title>
				<titleabbrev> Binding free energy formula
				</titleabbrev>
				<graphic
					fileref="images/binding-cycle-eqn.png"/>
			</equation>
			The following sections provide more detail on
			calculating individual terms of this equation.
		</para>

		<sect1 id="binding-solvation">
			<title> Solvation energy contributions to binding
			</title>
			<para> If we're just interested in calculating the solvation
				contributions to binding (steps 4 and 2 in <xref
					linkend="binding-cycle"/>), then we simply need
				to follow the instructions from <xref
					linkend="solvation-sect"/> for the complex and
				isolated components.  The solvation energy contribution
				to the binding is then given by <xref
					linkend="binding-solvation-eq"/>.  
				<equation id="binding-solvation-eq">
					<title> Solvation contributions to the binding
						free energy for a two-component complex
						of molecules "mol 1" and "mol 2".
						Refer to <xref
						linkend="binding-cycle"/> for numbering.</title>
					<titleabbrev> Solvation contributions to the binding
						free energy </titleabbrev>
					<graphic
						fileref="images/binding-solvation.png"/>
				</equation>
				This solvation energy contribution can be decomposed
				into polar and nonpolar parts as outlined in <xref
					linkend="solvation-sect"/>.
			</para>

		</sect1>
	
		<sect1 id="binding-coulombic"> 

			<title>Including Coulombic contributions</title>

			<para id="binding-coulomb"> To complete the binding
				free energy cycle (see <xref
					linkend="binding-cycle"/>), we need to add
				intermolecular Coulombic contributions to the
				solvation energy change upon binding to get the
				total electrostatic/solvent contribution to the
				binding free energy.  In particular, we're
				interested in the change in Coulombic
				electrostatic energy upon binding, as given by
				<xref linkend="binding-coulomb-eq"/>.
				<equation id="binding-coulomb-eq">
					<title> Coulombic contributions to the binding
						free energy for a two-component complex
						of molecules "mol 1" and "mol
						2".  See <xref
						linkend="binding-cycle-eqn"/>
						for numbering.</title>
					<titleabbrev> Coulombic contributions to the binding
						free energy </titleabbrev>
					<graphic
						fileref="images/binding-coulomb.png"/>
				</equation>
				Each of the &#916;G<subscript>coul</subscript>
				quantities in <xref
					linkend="binding-coulomb-eq"/> is the
				sum of pairwise Coulombic interactions between
				all atoms in the molecule (or complex)
				<emphasis>for a particular uniform
					dielectric</emphasis>.  In order to
				combine these Coulombic binding energies with
				the solvation energies described <link
					linkend="binding-solvation">above</link>,
				we need to make sure consistent dielectric
				constants are used.  In particular, Coulombic
				interactions should be calculated using the
				same uniform dielectric constant as the
				reference state of the solvation energy above.
				For example, if solvation energies are
				calculated for transfering a protein from a
				medium with uniform dielectric of
				&#949;<subscript>in</subscript>
				to a medium with internal dielectric
				&#949;<subscript>in</subscript>
				and external dielectric 
				&#949;<subscript>out</subscript>, 
				then Coulombic energies should
				be calculated using a dielectric of
				&#949;<subscript>in</subscript>.
				The APBS accessory program
				<filename>tools/manip/coulomb</filename> was
				created to help with the calculation of these
				individual per-molecule Coulombic energies.
				Given a PQR file as input, the
				<filename>tools/manip/coulomb</filename>
				program calculates Coulombic energies for a
				vacuum dielectric (e.g., a uniform dielectric
				of 1).  If the reference dielectric is
				&#949;<subscript>in</subscript>, then all
				energies returned by 
				<filename>tools/manip/coulomb</filename>
				need to be divided by 
				&#949;<subscript>in</subscript>.
			</para>
			<para>
				With the appropriate dielectric constant of
				&#949;<subscript>in</subscript> used
				for the Coulombic binding energy, a total
				electrostatic/solvation free energy can be
				calculated from <xref
					linkend="binding-cycle-eqn-2"/>.
				<xref linkend="binding-cycle-eqn"/>, 
				<xref linkend="binding-solvation-eq"/>, and
				<xref linkend="binding-coulomb-eq"/> as
				<equation id="binding-cycle-eqn-2">
					<title> Binding free energy </title>
					<graphic
						fileref="images/binding-cycle-eqn-2.png"/>
				</equation>
			</para>

		</sect1>

		<sect1 id="binding-ligand">
			<title>Hey! You don't have any parameters for my ligand!</title>

			<para><ulink url="&pdb2pqrurl;">PDB2PQR</ulink> can now (as of version 1.2.0) parameterize ligands, thanks to new features developed in collaboration with the Jens Nielsen group.  Please visit the PDB2PQR <ulink url="&pdb2pqrurl;">homepage</ulink> for more details.</para>

		</sect1>

		<sect1 id="binding-example">
			<title>A ligand binding example</title>

			<warning><para>Under construction</para></warning>

		</sect1>

	</chapter>

	<chapter id="forces-sect"> <title>How do I calculate solvation
forces?</title>

		<para>
			APBS provides force calculations for both polar and nonpolar solvation following the same procedures used in <xref linkend="solvation-sect"/>.
			In general, forces can be obtained by modifying input files used for solvation energy calculations to include <literal>calcforce total</literal> (for total forces on the entire solute) or <literal>calcforce comps</literal> to obtain detailed force information for each atom.
			It is important to note that, like solvation energy calculations, "self-interaction" terms must be removed (cf. the <xref linkend="born-input"/> example).
		</para>

	</chapter>

	<chapter id="pka-sect"> <title>How do I calculate a &pKa;?</title>

		<important>
			<para>This tutorial was prepared with Dave Sept as part of a lab for a
				biomolecular simulation class.</para>
		</important>

		<note>
			<para>This tutorial covers <emphasis>Poisson-Boltzmann</emphasis> methods
				for determining biomolecule &pKa; values.  Other methods for &pKa;
				and titration state determination are given in the <ulink
					url="http://pdb2pqr.sourceforge.net">PDB2PQR</ulink> <ulink
					url="http://pdb2pqr.sourceforge.net/examples/">examples</ulink>.</para>
		</note>
		
		<sect1 id="overview-sect"> <title>Overview</title>

			<formalpara> <title>Why &pKa; calculations?</title>
				Although &pKa; calculations may not seem like the most routine applications for demonstrating continuum electrostatics concepts, they have important scientific and teaching value.  From a scientific standpoint, &pKa; values are important determinants of biomolecular (particularly enzymatic) function and can be used to assess functional activity and identify active sites.  From a pedagogical perspective, &pKa; calculations require all of the important continuum electrostatics concepts and therefore serve as a "self-contained" introduction to solvation and binding energies.
			</formalpara>

			<note>
				<para>This tutorial covers <emphasis>Poisson-Boltzmann</emphasis> methods for determining biomolecule &pKa; values.  Other methods for &pKa; and titration state determination are given in the <ulink url="http://pdb2pqr.sourceforge.net">PDB2PQR</ulink> <ulink url="http://pdb2pqr.sourceforge.net/examples/">examples</ulink>.  Comparison with PDB2PQR results can provide hours of additional entertainment.
					</para>
				</note>

		</sect1>

		<sect1 id="pka-introduction-sect"> <title>Introduction</title>

			<para> This is a very brief introduction to the concepts behind biomolecular &pKa;s and titration states.  More information can be obtained from most biochemistry or biophysics textbooks as well as some of the original articles on &pKa; evaluation
				<footnote id="pKa-refs">
					<para>The following references provide a good introduction to biomolecular &pKa; calculations:
						<itemizedlist>
							<listitem>
								<para>Bashford D, Karplus M.  &pKa;'s of ionizable groups in proteins: Atomic detail from a continuum electrostatic model.  Biochemistry.  29 (44), 10219-25, 1990.  <ulink url="http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=Retrieve&amp;db=PubMed&amp;dopt=Citation&amp;list_uids=2271649">http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=Retrieve&amp;db=PubMed&amp;dopt=Citation&amp;list_uids=2271649</ulink> </para>
							</listitem>
							<listitem>
								<para>Antosiewicz J, McCammon JA, Gilson MK.  The determinants of &pKa;s in proteins.  Biochemistry.  35 (24), 7819-33, 1996.  <ulink url="http://pubs.acs.org/cgi-bin/pagelookup?bichaw/35/7819">http://pubs.acs.org/cgi-bin/pagelookup?bichaw/35/7819</ulink></para> 
							</listitem>
							<listitem>
								<para>Nielsen JE, Vriend G.  Optimizing the hydrogen-bond network in Poisson-Boltzmann equation-based &pKa; calculations.  Proteins-Structure Function and Genetics.  43 (4), 403-12, 2001.  <ulink url="http://www3.interscience.wiley.com/cgi-bin/abstract/78505732/ABSTRACT">http://www3.interscience.wiley.com/cgi-bin/abstract/78505732/ABSTRACT</ulink> </para>
							</listitem>
						</itemizedlist>
					</para>
				</footnote>.
			</para>

			<para>Recall that the acid dissociation constant &Ka; describes the dissocation of an acid into its components:
				<informalequation>
					<mediaobject> <imageobject> <imagedata fileref="images/Ka_chem_eqn.png" align="center"/> </imageobject> </mediaobject>
				</informalequation>
				by way of the activities
				<informalequation>
					<mediaobject> <imageobject> <imagedata fileref="images/Ka_act_eqn.png" align="center"/> </imageobject> </mediaobject>
				</informalequation>
				Under <quote>conditions of ideality,</quote>
				<footnote>
					<para>Such conditions might happen at extremely low ion and coion concentrations in the absence of other interacting species, etc.  In other words, for real biological systems, these conditions are rarely encountered.</para>
				</footnote>
				activities can be replaced with concentrations to give
				<informalequation>
					<mediaobject> <imageobject> <imagedata fileref="images/Ka_conc_eqn.png" align="center"/>.  </imageobject> </mediaobject>
				</informalequation>
				You should also recall that chemical equilibrium constants can be related to free energies by
				<informalequation>
					<mediaobject> <imageobject> <imagedata fileref="images/DaG_def.png" align="center"/> </imageobject> </mediaobject>
				</informalequation>
				However, chemists found it easier to use base-10 logarithms than natural logarithms for measuring pH, therefore the &pKa; is defined as
				<informalequation>
					<mediaobject> <imageobject> <imagedata fileref="images/pKa_def.png" align="center"/> </imageobject> </mediaobject>
				</informalequation>
			</para>

			<sect2> <title>Amino acid model &pKa; values </title>
				<para>In many calculations, &pKa; values are assigned based on model values for amino acid side chains to mimic
					<informalequation>
						<mediaobject> <imageobject> <imagedata fileref="images/Ka_model_chem_eqn.png" align="center"/> </imageobject> </mediaobject>
					</informalequation>
					for an <emphasis>isolated</emphasis> amino acid in solution.  Some model &pKa; values are given in <xref linkend="tab:model_pka"/>.
					<table id="tab:model_pka"> <title>Model amino acid &pKa; values for common titratable groups; data from Nielsen et al (see <link linkend="pKa-refs">footnote</link>) </title>
						<tgroup cols="2" colsep="1" rowsep="1">
							<thead>
								<row> <entry>Amino acid</entry> <entry>Model &pKa;</entry> </row> 
							</thead>
							<tbody>
								<row> <entry>Arginine</entry> <entry>13.0</entry> </row>
								<row> <entry>Aspartic acid</entry> <entry>4.0</entry> </row>
								<row> <entry>Cysteine</entry> <entry>8.7</entry> </row> 
								<row> <entry>C-terminus</entry> <entry>3.8</entry> </row> 
								<row> <entry>Glutamic acid</entry> <entry>4.4</entry> </row> 
								<row> <entry>Histidine</entry> <entry>6.3</entry> </row> 
								<row> <entry>Lysine</entry> <entry>10.4</entry> </row> 
								<row> <entry>N-terminus</entry> <entry>8.0</entry> </row> 
								<row> <entry>Tyrosine</entry> <entry>9.6</entry> </row> 
							</tbody> 
						</tgroup>
					</table>
				</para>
				<para> As we'll see in the next section, these model values provide the basis for calculating &pKa; values in proteins. </para>
			</sect2>

			<sect2> <title> &pKa; values in proteins </title>
				<para> The role of the model &pKa; values introduced in the previous sections is to move all the chemical (bond making and breaking) complexity of protonation into the model values.  In particular, &pKa; values in proteins are calculated as pertubations of the model compounds according to the free energy cycles shown below.  </para>
				<para> The &pKa; for the amino acid in the context of the protein is given by the free energy cycle:
					<informalfigure id="fig:pKa_cycle">
						<mediaobject> <imageobject> <imagedata fileref="images/Ka_protein_chem_eqn.png" align="center"/> </imageobject> </mediaobject>
					</informalfigure>
					We are interested in determining the unknown &Delta;<subscript>a</subscript>G<subscript>HA</subscript> from the known model &Delta;<subscript>a</subscript>G<subscript>HA,model</subscript> and the unknown &Delta;<subscript>xfer</subscript>G<subscript>HA</subscript> and &Delta;<subscript>xfer</subscript>G<subscript>A-</subscript> according to:
					<equation id="eqn:DaG"> <title>Acid dissociation free energy</title>
						<mediaobject> <imageobject> <imagedata fileref="images/DaG_from_cycle.png" align="center"/> </imageobject> </mediaobject>
					</equation>
				</para>
				<para> In general, the quantities &Delta;<subscript>xfer</subscript>G<subscript>HA</subscript> and &Delta;<subscript>xfer</subscript>G<subscript>A-</subscript> are obainted from a computational approach.  Nearly any free energy calculation method could be used to obtain these energies according to a scheme where the (de)solvation energies of the charged and uncharged amino acids are calculated according to:
					<figure id="fig:pKa_cycle_protein"> <title>&pKa; perturbation free energy cycle schematic</title>
						<mediaobject> <imageobject> <imagedata fileref="images/pKa_protein_cycle.png" align="center"/> </imageobject> </mediaobject>
					</figure>
					Note that these energies have all assumed the same background state of the protein for the calculations; in other words, the same states are used for other titratable groups in the protein for charged and uncharged amino acid states.  We'll discuss the implications of this assumption a bit later in this tutorial.
				</para>

			</sect2>

			<sect2> <title>Continuum electrostatics methods for &pKa; calculations in proteins</title>

				<para> Although nearly any free energy method could be used to evaluate the energies of transferring the protonated and unprotonated amino acids from solution into the protein environment, continuum electrostatics offer a (usually) satisfying compromise between accuracy and computational efficiency.  </para>

				<para> The transfer free energies to be calculated, &Delta;<subscript>xfer</subscript>G<subscript>HA</subscript> and &Delta;<subscript>xfer</subscript>G<subscript>A-</subscript>, can be determined from Poisson-Boltzmann (PB) energies.  In particular, these energies can be calculated as effective <quote>binding energy calculations</quote> similar to those covered in the APBS examples and tutorial:
					<equation id="eqn:dG_xfer"> <title>Transfer free energy</title>
						<mediaobject> <imageobject> <imagedata fileref="images/dG_xfer_eqn.png" align="center"/> </imageobject> </mediaobject>
					</equation>
					where
					<itemizedlist>
						<listitem> <para> G<subscript>protein with charged X</subscript> is the electrostatic energy of the protein with group X bound and all charges on X set to their normal values.</para>
						</listitem>
						<listitem> <para> G<subscript>protein with uncharged X</subscript> is the electrostatic energy of the protein with group X bound and all charges on X set to zero.</para>
						</listitem>
						<listitem> <para> G<subscript>charged X in solution</subscript> is the electrostatic energy of group X in solution with all charges set to their normal values.</para> </listitem>
					</itemizedlist>
				</para>

				<para> Note that, as with binding energies, <xref linkend="eqn:dG_xfer"/> can be evaluated two ways: 
					<itemizedlist id="list:methods"> <title>Ways to evaluate transfer free energies</title>
						<listitem> <para> Directly in a PB equation by computing the difference of <emphasis>total electrostatic energies</emphasis> (including self energies) from PB calculations for each of the states.  In order for this to work, all conformations/grid positions/charge states must be the same in each PB calculation.  </para> </listitem>
						<listitem> <para> Indirectly through PB calculations of solvation free energies and Coulomb's law calculations (in a dielectric &epsp;) of electrostatic interaction energies.  <emphasis>For a sufficiently fine grid</emphasis>, this method is much more stable.  </para> </listitem>
					</itemizedlist>
					Both of these methods can be combined, via free energy cycles, to give the desired &Delta;<subscript>xfer</subscript>G<subscript>X</subscript>.  However, when care is taken to use the same grids and conformations for all calculations, the direct method using total electrostatic energies is usually the most efficient.  </para>

				<para> Note that none of the methods discussed above have explicitly allowed for changes in titration state of other groups in the protein during protonation/deprotonation of the acid group of interest.  Additionally, none of these methods explicitly provide for conformational changes in the protein coupled to protonation/deprotonoation.  As such, we cannot claim to be computing true &pKa; values with this method.  Instead, we are calculating so-called <wordasword>intrinsic</wordasword> &pKa; values.  </para>

			</sect2>

		</sect1>

		<sect1> <title>Application to lysozyme</title>

			<sect2> <title>Background</title>

				<para> Hen egg white lysozyme (HEWL) is a very popular system for &pKa; calculations as it has a number of interesting values for its titratable residues.  Early &pKa; work on this enzyme is presented in <ulink url="http://pubs.acs.org/cgi-bin/searchRedirect.cgi/bichaw/1972/11/i11/pdf/bi00761a029.pdf">Tanford C, Roxby R.  Interpretation of protein titration curves.  Application to lysozyme.  Biochemistry.  11 (11), 2192-8, 1972</ulink> which also contains the &pKa; values used in this lab.  More recent &pKa; calculations and a review of some of the methodology can be found in <ulink url="http://www3.interscience.wiley.com/cgi-bin/abstract/78505732/ABSTRACT">Nielsen JE, Vriend G.  Optimizing the hydrogen-bond network in Poisson-Boltzmann equation-based pk(a) calculations.  Proteins-Structure Function and Genetics.  43 (4), 403-12, 2001</ulink>.  Finally, the biological relevance of lysozyme is briefly reviewed at <ulink url="http://en.wikipedia.org/wiki/Lysozyme">Wikipedia</ulink>.  </para>

				<para> HEWL has two active site residues GLU 35 and ASP 52 whose titration states determine the catalytic competency of the enzyme:
					<figure> <title>Active site of HEWL </title>
						<mediaobject> <imageobject> <imagedata fileref="images/lysozyme_mech.png" align="center"/> </imageobject> </mediaobject>
					</figure>
					In particular, the enzyme is only active when ASP 52 is ionized (&pKa; &#8776; 1.2) and GLU 35 is neutral (&pKa; = 6.3).  </para>
				<para>Additionally, lysozyme has ASP 66 with a &pKa; of 6.6 and HIS 15 with a &pKa; of 5.7.</para>
			</sect2>

			<sect2> <title>Overview and disclaimer</title>
				<para>In what follows, we will demonstrate the steps for determining the intrinsic &pKa; of GLU35.  However, this actually doesn't work very well (you'll need to decide why!).  Therefore, it is important that you also follow the same procedure for HIS15 and ASP66 to get better examples of <emphasis>working</emphasis> continuum solvent &pKa; calculations.</para>
			</sect2>

			<sect2> <title>Preparing the PDB file</title>
				<para> Download the PDB entry <ulink url="http://www.rcsb.org/pdb/cgi/explore.cgi?pdbId=2LZT">2LZT</ulink> from the PDB; save it as <filename>2LZT-GLU35.pdb</filename>.  If you have time, you should also visit the <ulink url="http://www.ebi.ac.uk/thornton-srv/databases/cgi-bin/pdbsum/GetPage.pl?pdbcode=2lzt">PDBSum</ulink> analysis page as well for additional information about the structure.  </para>

				<warning id="warn:water"> <title>Problems with explicit water!</title>
					<para> It is <emphasis>very</emphasis> important that you remove all explicit water from the PDB file before proceeding. (Why?) </para>
				</warning>


				<para> We're going to need to generate a protonated form of GLU 35 to perform our &pKa; calculations.  We will do this with the <ulink url="http://pdb2pqr.sourceforge.net/">PDB2PQR web service</ulink>.  PDB2PQR <quote>cleans up</quote> PDB files for electrostatics calculations by performing a number of operations described on the <ulink url="http://pdb2pqr.sourceforge.net/">PDB2PQR homepage</ulink>.  </para>

				<para> Unless otherwise directed, PDB2PQR adds hydrogens to residues based on model &pKa; values.  Therefore, we will need to specify the titration state of GLU 35 for our &pKa; calculation by changing the residue name from <varname>GLU</varname> to <varname>GLH</varname> using <ulink url="http://www.vim.org/">your favorite text editor</ulink>.  Save the result as <filename>2LZT-GLH35.pdb</filename> </para>

				<para> We're now ready to run PDB2PQR to generate protonated versions of our PDB files.  Use the command line version of PDB2PQR or one of the web servers listed on the <ulink url="http://pdb2pqr.sourceforge.net/">PDB2PQR homepage</ulink> to generate protonoated PQR files for for <filename>2LZT-GLU35.pdb</filename> and <filename>2LZT-GLH35.pdb</filename>.  Name your results <filename>2LZT-GLU35.pqr</filename> and <filename>2LZT-GLH35.pqr</filename>, respectively.  Although it is always important to test sensitivity to various force fields, I'd recommend starting with PARSE.  </para>

				<note>
					<para> You can use PDB2PQR to assign titration states with PROPKA but don't do it for the above steps since we need to set the titration states explicit for our calculations.  </para>
				</note>

				<para> Recall that we're also going to need the isolated residue for our electrostatics calculations of intrinsic &pKa;.  Use your favorite text editor to extract the entire GLU 35 or GLH 35 residue from <filename>2LZT-GLU35.pqr</filename> and <filename>2LZT-GLH35.pqr</filename>.  Save the results as <filename>GLU35.pqr</filename> and <filename>GLH35.pqr</filename>, respectively.  </para>

				<para> Finally, we'll also need to perform electrostatics calculations on HEWL with the uncharged sidechains.  Use your favorite text editor to zero out the charges in <filename>2LZT-GLU35.pqr</filename> and <filename>2LZT-GLH35.pqr</filename> to create <filename>2LZT-noGLU35.pqr</filename> and <filename>2LZT-noGLH35.pqr</filename>.  This can be done by setting the second-to-last column in the PQR file to zero; e.g.
					<programlisting>
ATOM    534  N   GLU    35       6.456  16.408  22.487 -0.5163 1.8240
ATOM    535  CA  GLU    35       6.354  15.205  23.349  0.0397 1.9080
ATOM    536  C   GLU    35       6.889  13.941  22.695  0.5366 1.9080
ATOM    537  O   GLU    35       7.705  13.192  23.277 -0.5819 1.6612
ATOM    538  CB  GLU    35       4.906  14.973  23.796  0.0560 1.9080
ATOM    539  CG  GLU    35       4.476  15.932  24.948  0.0136 1.9080
ATOM    540  CD  GLU    35       5.171  15.736  26.255  0.8054 1.9080
ATOM    541  OE1 GLU    35       5.844  14.786  26.570 -0.8188 1.6612
ATOM    542  OE2 GLU    35       5.038  16.682  27.056 -0.8188 1.6612
ATOM    543  H   GLU    35       5.671  16.799  22.056  0.2936 0.6000
ATOM    544  HA  GLU    35       6.856  15.382  24.215  0.1105 1.3870
ATOM    545  HB2 GLU    35       4.318  15.158  23.042 -0.0173 1.4870
ATOM    546  HB3 GLU    35       4.832  14.066  24.142 -0.0173 1.4870
ATOM    547  HG2 GLU    35       4.654  16.857  24.629 -0.0425 1.4870
ATOM    548  HG3 GLU    35       3.500  15.796  25.084 -0.0425 1.4870
					</programlisting>
					might become
					<programlisting>
ATOM    534  N   GLU    35       6.456  16.408  22.487  0.0000 1.8240
ATOM    535  CA  GLU    35       6.354  15.205  23.349  0.0000 1.9080
ATOM    536  C   GLU    35       6.889  13.941  22.695  0.0000 1.9080
ATOM    537  O   GLU    35       7.705  13.192  23.277  0.0000 1.6612
ATOM    538  CB  GLU    35       4.906  14.973  23.796  0.0000 1.9080
ATOM    539  CG  GLU    35       4.476  15.932  24.948  0.0000 1.9080
ATOM    540  CD  GLU    35       5.171  15.736  26.255  0.0000 1.9080
ATOM    541  OE1 GLU    35       5.844  14.786  26.570  0.0000 1.6612
ATOM    542  OE2 GLU    35       5.038  16.682  27.056  0.0000 1.6612
ATOM    543  H   GLU    35       5.671  16.799  22.056  0.0000 0.6000
ATOM    544  HA  GLU    35       6.856  15.382  24.215  0.0000 1.3870
ATOM    545  HB2 GLU    35       4.318  15.158  23.042  0.0000 1.4870
ATOM    546  HB3 GLU    35       4.832  14.066  24.142  0.0000 1.4870
ATOM    547  HG2 GLU    35       4.654  16.857  24.629  0.0000 1.4870
ATOM    548  HG3 GLU    35       3.500  15.796  25.084  0.0000 1.4870
					</programlisting>
				</para>

			</sect2>


			<sect2> <title>Setting up the total electrostatic energy calculations</title>

				<para> We will be using focusing calculations to calculate the electrostatic potential and free energies for the systems of interest.  </para>

				<warning>
					<para> In what follows, we are evaluating <emphasis>total</emphasis> electrostatic free energies -- e.g., energies which contain charge self-interaction terms.  We will cancel these self-interaction terms in subsequent steps when we calculate solvation or transfer free energies.  Therefore, it is <emphasis>very important</emphasis> that you use the same grid parameters (grid centers, dimensions, spacings, etc.) for every calculation.  </para>
				</warning>

				<para> Here is a template input that we will use for each of the solvation energy calculations (download it <ulink url="examples/pKa/GLU35/apbs-template.in">here</ulink>):
					<programlisting>
read
	mol pqr compound.pqr # This is the compound for which we will calculate solvation energies
	mol pqr ref.pqr      # This is a compound used as a reference for grid centering
end

elec name inhom          
	mg-auto              # Focusing calculations
	dime 129 129 129     # This is a good grid spacing for this system
	cglen 52.0 66.0 79.0 # These are reasonable coarse grid settings for this system (PDB2PQR-recommended)
	fglen 51.0 59.0 67.0 # These are reasonable fine grid settings for this system (PDB2PQR-recommended)
	cgcent mol 2         # Center the grid on the reference molecule
	fgcent mol 2         # Center the grid on the reference molecule
	mol 1
	lpbe
	bcfl sdh
	pdie 20.00
	sdie 78.54
	srfm smol
	sdens 40.0
	chgm spl2
	srad 1.40
	swin 0.30
	temp 298.15
	calcenergy total
	calcforce no
end

# Print the final energy 
print energy inhom end

quit
					</programlisting>
					There are a number of aspects to this input file which are worth noting:
					<itemizedlist>
						<listitem>
							<para> In general, <varname>compound.pqr</varname> will change for each calculation but <varname>ref.pqr</varname> will not.  Choose one molecule to be <varname>ref.pqr</varname> (<filename>2LZT-GLU35.pqr</filename> is a good choice) and use it in every calculation.  </para>
						</listitem>
						<listitem>
							<para> We are using a solute dielectric constant (&epsp;) of 20 (see <parameter>pdie</parameter>).  This is a common choice for &pKa; since <footnote> <para>Start vigorous waving of hands...</para> </footnote> it is thought to implicitly represent internal relaxation and rearrangement of the solute <footnote> <para>Stop vigorous waving of hands...</para> </footnote>.  </para>
						</listitem>
						<listitem>
							<para> We are using a molecular surface (<parameter>srfm smol</parameter>) with a reasonably high density of surface discretization points (<parameter>sdens 40.0</parameter>).  &pKa; and other electrostatics results can be very sensitive to surface choice. </para>
						</listitem>
					</itemizedlist>
				</para>

				<para> You now have enough information to calculate total electrostatic energies for all of the relevant molecules so far: <filename>2LZT-GLU35.pqr</filename>, <filename>2LZT-GLH35.pqr</filename>, <filename>2LZT-noGLU35.pqr</filename>, <filename>2LZT-noGLH35.pqr</filename>, <filename>GLU35.pqr</filename>, and <filename>GLH35.pqr</filename>.  You should be able to construct APBS input files for each of these systems by modifying the template above.  Once these input files are constructed, you can run the PB calculation by
<screen>
<prompt>$</prompt> <userinput>apbs</userinput> <varname>foo.in</varname> | tee <varname>foo.out</varname>
</screen>
					where <varname>foo.in</varname> is the input file of interest and the output is saved in <varname>foo.out</varname>. </para>

			</sect2>

			<sect2> <title>Setting up the transfer free energy calculations</title>

				<para> Recall from our <link linkend="list:methods">earlier discussion</link> that the transfer free energies can be evaluated in two ways.  It is up to you to decide which method to use; both should give comparable results for a sufficiently fine grid.  As mentioned above, the direct subtraction of total electrostatic energies is usually the most stable route, assuming identical grids and solute conformations are used for all calculations.  </para>
				<para> Any differences in results between these two transfer free energy methods are typically due to a lack of convergence in the calculations and can be resolved by decreasing the grid spacing (e.g., increasing the number of grid points).  </para>

				<para> If you choose to decompose the transfer free energies into solvation and Coulombic energy changes, then you will need to perform two additional electrostatics calculations beyond the APBS calculations outlined in the previous section:
					<itemizedlist>
						<listitem> <para> First, you will need to re-run all of your APBS calculations with a homogeneous dielectric &epss; = &epsp; to calculate solvation energies.  This can be accomplished by appropriate modification of the input files from the previous section.  </para> </listitem>
						<listitem>
							<para> Second, you will need to calculate Coulombic interaction energies.  The APBS program <command>coulomb</command> will evaluate the Coulomb's law electrostatic energy of a set of charges in a vacuum.  The program's usage is
								<screen>
<prompt>$</prompt> <userinput>coulomb foo.pqr</userinput>
								</screen>
								where <varname>foo.pqr</varname> is the particular PQR file you are interested in.
								Note that this program can also be run with no arguments to obtain an expanded list of options.  <emphasis>Don't forget to scale by &epsp;!</emphasis> </para>
						</listitem>
					</itemizedlist>
				</para>

			</sect2>

			<sect2 id="sec:cheat"> <title>Putting it all together</title>
				<para> At this point, you should have everything you need to calculate the intrinsic &pKa; of interest.  However, if you get stuck, I've included some example files here that might be helpful:
					<variablelist> 
						<varlistentry>
							<term><filename><ulink url="examples/pKa/GLU35/GLU35.pqr">GLU35.pqr</ulink></filename></term>
							<term><filename><ulink url="examples/pKa/GLU35/GLH35.pqr">GLH35.pqr</ulink></filename></term>
							<term><filename><ulink url="examples/pKa/GLU35/2LZT-GLH35.pqr">2LZT-GLH35.pqr</ulink></filename></term>
							<term><filename><ulink url="examples/pKa/GLU35/2LZT-GLU35.pqr">2LZT-GLU35.pqr</ulink></filename></term>
							<term><filename><ulink url="examples/pKa/GLU35/2LZT-noGLH35.pqr">2LZT-noGLH35.pqr</ulink></filename></term>
							<term><filename><ulink url="examples/pKa/GLU35/2LZT-noGLU35.pqr">2LZT-noGLU35.pqr</ulink></filename></term>
							<listitem> <para>PQR files described above</para> </listitem>
						</varlistentry>
						<varlistentry>
							<term><filename><ulink url="examples/pKa/GLU35/2LZT-noGLH35.in">2LZT-noGLH35.in</ulink></filename></term>
							<term><filename><ulink url="examples/pKa/GLU35/2LZT-GLH35.in">2LZT-GLH35.in</ulink></filename></term>
							<term><filename><ulink url="examples/pKa/GLU35/GLH35.in">GLH35.in</ulink></filename></term>
							<listitem> <para>APBS input files needed to calculate the transfer free energy for GLH directly using total electrostatic energies.</para> </listitem>
						</varlistentry>
						<varlistentry>
							<term><filename><ulink url="examples/pKa/GLU35/2LZT-noGLH35-vac.in">2LZT-noGLH35-vac.in</ulink></filename></term>
							<term><filename><ulink url="examples/pKa/GLU35/2LZT-GLH35-vac.in">2LZT-GLH35-vac.in</ulink></filename></term>
							<term><filename><ulink url="examples/pKa/GLU35/GLH35-vac.in">GLH35-vac.in</ulink></filename></term>
							<listitem> <para>Additional APBS input files needed to calculate the transfer free energy for GLH using polar solvation energies.</para> </listitem>
						</varlistentry>
						<varlistentry>
							<term><filename><ulink url="examples/pKa/GLU35/2LZT-noGLU35.in">2LZT-noGLU35.in</ulink></filename></term>
							<term><filename><ulink url="examples/pKa/GLU35/2LZT-GLU35.in">2LZT-GLU35.in</ulink></filename></term>
							<term><filename><ulink url="examples/pKa/GLU35/GLU35.in">GLU35.in</ulink></filename></term>
							<listitem> <para>APBS input files needed to calculate the transfer free energy for GLU directly using total electrostatic energies.</para> </listitem>
						</varlistentry>
						<varlistentry>
							<term><filename><ulink url="examples/pKa/GLU35/2LZT-noGLU35-vac.in">2LZT-noGLU35-vac.in</ulink></filename></term>
							<term><filename><ulink url="examples/pKa/GLU35/2LZT-GLU35-vac.in">2LZT-GLU35-vac.in</ulink></filename></term>
							<term><filename><ulink url="examples/pKa/GLU35/GLU35-vac.in">GLU35-vac.in</ulink></filename></term>
							<listitem> <para>Additional APBS input files needed to calculate the transfer free energy for GLU using polar solvation energies.</para> </listitem>
						</varlistentry>
						<varlistentry>
							<term><filename><ulink url="examples/pKa/GLU35/run-apbs.sh">run-apbs.sh</ulink></filename></term>
							<listitem> <para><ulink url="http://www.gnu.org/software/bash/">Bash</ulink> script to run all the APBS input files listed above.  Assumes the <filename>apbs</filename> binary is in your <varname>PATH</varname>.</para> </listitem>
						</varlistentry>
						<varlistentry>
							<term><filename><ulink url="examples/pKa/GLU35/run-coul.sh">run-coul.sh</ulink></filename></term>
							<listitem> <para><ulink url="http://www.gnu.org/software/bash/">Bash</ulink> script to run supporting Coulombic energy calculations for solvation energy-based evaluation of the transfer free energies.  Assumes the APBS <filename>coulomb</filename> binary (usually found in <filename>apbs/tools/manip</filename>) is in your <varname>PATH</varname>.</para> </listitem>
						</varlistentry>
						<!-- <varlistentry>
							<term><filename><ulink url="examples/pKa/process.sh">process.sh</ulink></filename></term>
							<listitem> <para><ulink url="http://www.gnu.org/software/bash/">Bash</ulink> script to process APBS output and calculate &pKa; shifts directly using total electrostatic energies.  Assumes results were obtained by running <filename>run-apbs.sh</filename>, linked above.</para> </listitem>
						</varlistentry> -->

					</variablelist>
				</para>
			</sect2>

			<sect2> <title>What's next?</title>
				<para>Based on this brief introduction, you should be in a good position to go back and try to evaluate intrinsic &pKa;s for HIS 15 and ASP 66.  How well do your results for those residues agree with experiment?  What's different with those residues?</para> 
				<para>So far, we've only examined <emphasis>intrinsic</emphasis> &pKa;s in this lab and have ignored coupling between titratable groups.  <ulink url="http://enzyme.ucd.ie/group_members/jens">Jens Nielsen</ulink> has developed a very nice software package called <ulink url="http://enzyme.ucd.ie/Science/pKa/pKaTool">pKaTool</ulink> which allows you to explore coupling between titratable sites and its impact on titration events in a protein system.  He has provided a <ulink url="http://enzyme.ucd.ie/Science/pKa/pKaTool/Documents/pKa_system_BCX.pdf">tutorial (PDF)</ulink> which you can use to explore coupled titration states and use to familiarize yourself with pKaTool.</para>

			</sect2>

		</sect1>
		
</chapter>

<chapter id="parallel-sect"> <title>My calculation requires too much memory!</title>
	<para> APBS requires approximately 200 B memory per grid point.
		Memory usage can be predicted before performing the
		calculations using the <filename>tools/manip/psize.py</filename>
		Python script provided with APBS. </para>
	<para>  If it appears your calculation is going to require more
		memory than is currently available on your system, you
		have a few options:
	</para>
	<itemizedlist>
		<listitem>
			<para>APBS calculations can be performed in
				parallel across multiple processors
				(hopefully, sharing distributed
				memory!).  This functionality is
				provided by the
				<literal>mg-para</literal> keyword
				which is described in more detail in
				the APBS user manual and <link
					linkend="parallel">below</link>.  
			</para>
		</listitem>
		<listitem>
			<para>APBS calculations can be broken into a
				series of smaller, asynchronous runs
				which (individually) require less
				memory.  This functionality is provided
				by the <literal>mg-para</literal>
				<literal>async</literal> keyword
				which is described in more detail in
				the APBS user manual and <link
					linkend="async">below</link>.  
			</para>
		</listitem>
		<listitem>
			<para>
				Submit your calculations through <link
					linkend="gemstone-sect">Gemstone</link>
				to external computational resources.
			</para>
		</listitem>
	</itemizedlist>

	<sect1 id="parallel"> <title>Parallel calculations:  an example</title>
		<para>
			The actin dimer example provided with the APBS
			source code
			(<filename>examples/actin-dimer/complex.pqr</filename>)
			is a fairly large system and a good example for
			parallel focusing calculations.  This example
			will use the actin dimer complex PQR file
			<filename><ulink
					url="examples/parallel/complex.pqr">complex.pqr</ulink></filename>.
		</para>
		<para>  We're going to use an 8-processor parallel
			calculation to write out the electrostatic
			potential map for this complex.  Each processor
			will solve a portion of the overall problem
			using the parallel focusing method (see <ulink
				url="http://dx.doi.org/10.1073/pnas.181342398">Baker
				et al, PNAS, 2001</ulink>) on a
			97<superscript>3</superscript> mesh with 20%
			overlap between meshes for neighboring
			processors.  An example input file for this
			calculation might look like (download <ulink
				url="examples/parallel/apbs.in">here</ulink>):
			<programlisting id="mg-para.in">
read 
	mol pqr complex.pqr
end

elec name complex
	mg-para
	ofrac 0.1
	pdime 2 2 2
	dime  97  97  97
	fglen 150 115 160
	cglen 156 121 162
	cgcent mol 1
	fgcent mol 1
	mol 1
	npbe
	bcfl sdh
	ion 1 0.150 2.0
	ion -1 0.150 2.0 
	pdie 2.0
	sdie 78.54
	srfm mol
	chgm spl0
	srad 1.4
	swin 0.3
	sdens 10.0
	temp 298.15
	calcenergy total
	calcforce no
	write pot dx pot
end

quit
			</programlisting>
			where the <literal>pdime 2 2 2</literal>
			specifies the 8-processor array dimensions, the
			<literal>ofrac 0.1</literal> specifies the 20%
			overlap between processor calculations, and the
			<literal>dime 97 97 97</literal> specifies the
			size of <emphasis>each processor's</emphasis>
			calculation.  The <literal>write pot dx
				pot</literal> instructs APBS to write
			out <ulink
				url="&ugurl;#opendx-format">OpenDX-format</ulink>
			maps of the potential to 8 files
			<filename>pot#.dx</filename>, where
			<literal>#</literal> is the number of the
			particular processor.
		</para>
		<para>
			Running this input file with an MPI-compiled version
			of APBS runs 8 parallel focusing calculations,
			with each calculation generating fine-scale
			solutions on a different region of the
			(<literal>fglen</literal>) problem domain.
			Note that 8 separate OpenDX files are written
			by the 8 processors used to perform the
			calculation.  Writing separate OpenDX files
			allows us to avoid communication in the
			parallel run and keeps individual file sizes
			(relatively) small.  Additionally, if a user is
			interested in a specific portion of the problem
			domain, only a few files are needed to get
			local potential information.
		</para>
		<para>
			However, most users are interested in global
			potentials.  For some programs (<ulink
				url="http://opendx.org">OpenDX</ulink>,
			<ulink
				url="http://www.visualdatatools.com/">DataTank</ulink>),
			the individual potential files can simply be
			read into the program separately and the
			program will reconstruct the global map.
			Most other programs will require the user to
			reassemble the global map first; APBS provides
			the <filename><ulink
					url="&ugurl;">mergedx</ulink></filename>
			program for this purpose.
			<filename>mergedx</filename> is a simple
			program that allows users to combine several
			OpenDX files from a parallel focusing
			calculation into a single map.  This map can be
			downsampled from the original resolution to
			provide coarser datasets for fast
			visualization, etc.
			For example, the command
			<screen>
<prompt>$</prompt> mergedx 65 65 65 pot0.dx pot1.dx pot2.dx pot3.dx pot4.dx pot5.dx pot6.dx pot7.dx
			</screen>
			will generate a file
			<filename>gridmerged.dx</filename>
			which has downsampled the much larger dataset
			contained in the 8 OpenDX files into a
			65<superscript>3</superscript> file which
			would be suitable for rough visualization.  An
			example of the <filename>mergedx</filename>
			output (see <xref linkend="vmd-isocontour"/>
			for methods) is shown in 
			<figure> <title>Actin dimer isocontours from
parallel focusing</title>
					<graphic fileref="images/actin_dimer-iso_trans.jpg"></graphic>
				</figure>
				Note that downsampling isn't necessary -- and
				often isn't desirable for high quality
				visualization or quantitative analysis.
			</para>
		</sect1>

		<sect1 id="async"> <title>Asynchronous sequential calculations</title>
			<para>
				The steps described in the <link
					linkend="parallel">previous
					section</link> can also be performed
				for systems or binaries which are not equipped
				for parallel calculations via MPI.  In
				particular, you can add 
				<screen>
<userinput>async</userinput> <parameter>n</parameter>
				</screen>
				to the <literal>ELEC</literal>
				<literal>mg-para</literal> APBS input file to
				make the single-processor calculation
				masquerade as processor
				<parameter>n</parameter> of a parallel
				calculation.  
			</para>
			<para>
				Scalar maps from asynchronous APBS calculations
				can be combined using the
				<filename>mergedx</filename> program as
				described above.  Currently, energies and
				forces from asynchronous APBS calculations need
				to merged manually (e.g., summed) from the
				individual asynchronous calculation output.
				This can be accomplished by simple shell
				scripts.
			</para>
			<para>
				As a specific example, we can modify the <link
					linkend="mg-para.in">input file
					above</link> to include a
				<literal>async 0</literal> command in the ELEC
				statement and thus cause APBS to perform the
				operations of the first processor in the
				parallel focusing calculation.  The modified
				input file (available for download <ulink
					url="examples/parallel/apbs-async.in">here</ulink>)
				should look like:
				<programlisting id="mg-para-async.in">
read 
	mol pqr complex.pqr
end

elec name complex
	mg-para
	ofrac 0.1
	pdime 2 2 2
	async 0
	dime  97  97  97
	fglen 150 115 160
	cglen 156 121 162
	cgcent mol 1
	fgcent mol 1
	mol 1
	npbe
	bcfl sdh
	ion 1 0.150 2.0
	ion -1 0.150 2.0 
	pdie 2.0
	sdie 78.54
	srfm mol
	chgm spl0
	srad 1.4
	swin 0.3
	sdens 10.0
	temp 298.15
	calcenergy total
	calcforce no
	write pot dx pot
end

quit
				</programlisting>
				This should create an OpenDX-format potential
				map called <filename>pot.dx</filename>,
				corresponding to the output from processor 0 in
				a parallel focusing calculation.  Performing
				additional APBS calculations with
				<literal>async 1</literal>,
				<literal>async 2</literal>,
				...,
				<literal>async 7</literal>
				will generate the corresponding OpenDX maps for
				the remaining processors of the parallel
				focusing calculations.  These can then be
				reassembled with <filename>mergedx</filename>
				as described above.
			</para>
		</sect1>

	</chapter>

	<chapter id="simulation-sect"> <title>How do I use APBS with my
molecular dynamics program (for MM/PBSA, etc.)?</title>

		<para>
			Robert Konecny (<ulink url="http://mccammon.ucsd.edu">McCammon group</ulink>) has developed the <ulink url="http://mccammon.ucsd.edu/iapbs/">iAPBS</ulink> package which provides a C/C++/FORTRAN interface to APBS for use with AMBER, NAMD, and CHARMM.  More information is available from the iAPBS <ulink url="http://mccammon.ucsd.edu/iapbs/">homepage</ulink>.
		</para>
		
		<para>
			APBS also links against developmental versions of the <ulink url="http://dasher.wustl.edu/tinker/">TINKER</ulink> software package.  Public versions of TINKER with APBS support should be available soon from <ulink url="http://dasher.wustl.edu/tinker/">http://dasher.wustl.edu/tinker/</ulink>.
		</para>
		
	</chapter>

	<chapter id="gemstone-sect"> <title>Can I run APBS via the web?  (Gemstone) </title>

		<para>Yes, you can run APBS via the web, thanks to the <ulink
				url="http://gemstone.mozdev.org">Gemstone</ulink>
			service.  This section demonstrates how <ulink
				url="http://gemstone.mozdev.org">Gemstone</ulink>
			can be used to perform most APBS calculations commonly
			done through the command-line interface.  Better yet,
			it allows you to use <ulink
				url="http://nbcr.net">NBCR's</ulink> resources
			instead of your own!  
		</para>

		<sect1> <title>Getting Gemstone</title>
			<para> You need to download and install the Gemstone
				extension for the <ulink
					url="http://www.mozilla.com/firefox/">Firefox</ulink>
				web browser from <ulink
					url="http://gemstone.mozdev.org">http://gemstone.mozdev.org</ulink>
				before starting this tutorial.</para>
		</sect1>

		<sect1> <title>Preparing a structure with PDB2PQR</title>
			<para> We'll start by preparing a structure with <ulink
					url="http://pdb2pqr.sf.net">PDB2PQR</ulink>.
				First, you need to download a PDB file from the
				<ulink url="http://www.pdb.org">Protein Data
					Bank</ulink>.  For the purposes of this
				example, we'll use <ulink
					url="http://www.pdb.org/pdb/navbarsearch.do?newSearch=yes&amp;inputQuickSearch=1fas">1FAS</ulink>
				in PDB format (download directly <ulink
					url="http://www.pdb.org/pdb/downloadFile.do?fileFormat=pdb&amp;compression=NO&amp;structureId=1FAS">here</ulink>).  </para>

			<para> Open the Gemstone interface through the Firefox
				menu <menuchoice> <guimenu>Tools</guimenu>
					<guimenuitem>Gemstone</guimenuitem>
				</menuchoice>.  Select the PDB2PQR
				application through the Gemstone menu
				<menuchoice> <guimenu>Utils</guimenu>
					<guimenuitem>PDB2PQR</guimenuitem>
				</menuchoice> on the righthand side of
				the Gemstone screen.  Select the PDB
				file you just downloaded and any other
				options for PDB2PQR of interest.  Your
				screen should look something like:
				<figure> <title>Gemstone PDB2PQR calculation</title>
					<graphic fileref="images/gemstone-pdb2pqr.png"></graphic>
				</figure>
				Go ahead and "Run" the Gemstone
				calculation, check the
				<filename>stdOut</filename> and
				<filename>stdErr</filename> for any
				warning messages, and download the
				resulting PQR file.  </para>

		</sect1>

		<sect1> <title>Perform an electrostatics calculation with APBS</title>

			<para>We're now ready to perform an APBS
				calculation of the 1FAS electrostatic
				potential through Gemstone.  Open the
				<menuchoice> 
					<guimenu>Chemistry</guimenu> 
					<guimenuitem>Apbs</guimenuitem> 
				</menuchoice>
				menu on the righthand side of the
				Gemstone screen.  We'll step through
				each of the input tabs in the middle
				pane in the following sections.
			</para>

			<sect2> <title>Calculation</title>
				<para>Move to the Calculation tab in
					the middle pane.</para>
				<para>Most of the "Mathematics"
					settings can be left as-is;
					however, feel free to play with
					the discretization and surface
					definitions to see how it
					affects your results.</para>
				<para>Under "Molecules", load the 1FAS
					PQR file you just prepared in
					the previous section.</para>
				<para>Don't select anything under
					"Energy and Force" for this
					calculation.</para> <para>At
					this point, your screen should
					look something like this:
					<figure> <title>Gemstone APBS/Calculation screen</title>
						<graphic fileref="images/gemstone-apbs-calculation.png"/>
					</figure>
				</para>
			</sect2>

			<sect2> <title>Grid</title>
				<para>Next, move to the Grid tab in the
					middle pane.</para>
				<para>Under "General", enter 97 for X,
					Y, and Z "Grid points".</para>
				<para>Under "Coarse Grid", choose 100
					for all X, Y, and Z "Lengths".
					Center the mesh on the
					molecule.</para>
				<para>Under "Fine Grid", choose 80 for
					all X, Y, and Z "Lengths".
					Center the mesh on the
					molecule.</para>
				<para>Leave the "Parallel Execution"
					alone for this
					calculation.</para>
				<para>At this point, your screen should
					look something like this:
					<figure> <title>Gemstone APBS/Grid screen</title>
						<graphic fileref="images/gemstone-apbs-grid.png"/>
					</figure>
				</para>
			</sect2>

			<sect2> <title>Physics</title>
				<para>Next, move to the Physics tab in
					the middle pane.</para>
				<para>Choose any values you like here;
					the defaults should be fine for
					most visualization
					calculations.</para>
				<para>At this point, your screen should
					look something like this:
					<figure> <title>Gemstone APBS/Physics screen</title>
						<graphic fileref="images/gemstone-apbs-physics.png"/>
					</figure>
				</para>
			</sect2>

			<sect2> <title>File I/O </title>
				<para>Next, move to the File I/O tab in
					the middle pane.</para>
				<para>Unless you have other properties
					you wan to visualize, you can
					leave these settings
					as-is.</para>
				<para>At this point, your screen should
					look something like this:
					<figure> <title>Gemstone APBS/File I/O screen</title>
						<graphic fileref="images/gemstone-apbs-file.png"/>
					</figure>
				</para>
			</sect2>

			<sect2> <title>Running the calculation</title>
				<para>Finally, return to the Calculation tab
					and select "Run APBS".  After a while,
					the results will appear under the
					Output tab in the middle pane.  When
					the run is complete, you should see
					something like this:
					<figure> <title>Gemstone APBS/Calculation screen (run complete)</title>
						<graphic fileref="images/gemstone-apbs-finished.png"/>
					</figure>
					In particular, you should have the
					option to save the potential file
					calculated in this APBS run.  </para>
			</sect2>
			<sect2> <title>Other calculations</title>
				<para>Nearly all of the examples in this
					tutorial can also be performed with
					Gemstone.  Furthermore, input files can
					be uploaded to use Gemstone as a
					"portal" to web services at other
					institutions. </para>
			</sect2>
		</sect1>
	</chapter> 

	<chapter id="more-sect"> <title>More examples...</title>
		<para> In addition to the relatively simple applications
			presented here, there are a number of additional
			examples distributed with the APBS software package
			(<ulink url="&apbsurl;">&apbsurl;</ulink>) which
			include ionization energies, protein-protein
			interactions, parallel calculations, etc.  </para>
	</chapter>

	<chapter id="help-sect"> <title>None of this answered my question...</title>
		<para>Please visit the <ulink
				url="http://lists.sourceforge.net/mailman/listinfo/apbs-users">APBS-users
				mailing list</ulink>.  After you've looked for
			the answer to your question in the <ulink
				url="http://sourceforge.net/mailarchive/forum.php?forum_id=46597">archive</ulink>,
			please post it to the mailing list. </para>
	</chapter>


</book>

